#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$:.unshift File.expand_path('../lib', __dir__)

require 'renza-publisher'
require 'renza-publisher/image-processor'
require 'renza-publisher/support'

require 'fileutils'
require 'colorize'

include FileUtils
include RenzaPublisher::Support

# [TDDO] enrich command line option.
src_video = ARGV.first
disk_no = 1
RenzaPublisher::VIDEO_FORMAT = File.extname(src_video)[1..-1]

# # 1. create images
puts "ffmpeg -i #{src_video} -r 1 -f image2 #{RenzaPublisher::IMAGE_FORMAT}"
puts `ffmpeg -i #{src_video} -r 1 -f image2 #{RenzaPublisher::IMAGE_FORMAT}`

# # 2. choose sample images and mask them
# [TODO] implement
samples = {beginning: 50, win: 203, lose: 361}.map_values{|i| image_file(i)}

# # 3. search begin-ends.
i = 1
result = Array.new
loop do
  candidate = image_file(i)

  break if not File.exists? candidate
  
  if    RenzaPublisher::ImageProcessor.is_same?(samples[:beginning], candidate, "mask2.jpeg")
    puts "beginning: #{candidate}".blue
    result << [i]
    i += 70
  elsif RenzaPublisher::ImageProcessor.is_same?(samples[:win],  candidate)
    puts "win: #{candidate}".green
    result.last << i if result.size > 0 and result.last.size == 1
    i += 10
  elsif RenzaPublisher::ImageProcessor.is_same?(samples[:lose], candidate, "mask.jpeg")
    puts "lose: #{candidate}".green
    # 1秒前を指定
    result.last << i-1 if result.size > 0 and result.last.size == 1
    i += 10
  else
    i += 1
  end
end

pp result

File.write("game_time_disk#{disk_no}.txt", result.pretty_inspect)

# # 4. split the movie.
result.select{|a| a.size == 2}.each_with_index do |times, i|
  from, to = times
  thumbnail = image_file(from+5)
  
  rm video_file(i+1) if File.exists? video_file(i+1)
  cp thumbnail, thumbnail_file(i+1)
  
  puts "ffmpeg -i \"#{src_video}\" -ss #{from-3} -t #{to-from+1} \"output#{i+1}.m4v\""
  puts `ffmpeg -i "#{src_video}"   -ss #{from-3} -t #{to-from+1}  "output#{i+1}.m4v"`
end
