#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$:.unshift File.expand_path('../lib', __dir__)

require 'renza-publisher'
require 'renza-publisher/path'
require 'renza-publisher/oauth_helper'

require 'net/http'
require 'net/https'
require 'optparse'

require 'google/api_client'

require 'colorize'
require 'pry'

begin
  input = Hash.new

  opt = OptionParser.new("Usage: renza-publisher-upload [-r <video-number>>] [-d <description>>] <data-directory>")
  opt.on('-t TARGET-VIDEO-NUMBER-OR-RANGE','--target', 'Specify videos to upload. It is number or range of number. e.g. 4..6') {|s|
    input[:target] = case s
                     when /^\d+$/
                       s.to_i
                     when /^\d+\.\.(\.)?\d+$/
                       eval s
                     else
                       abort "数値またはその範囲を指定してください"
                     end
  }
  opt.on('-d ONE-LINE-DESCRIPTION','Description displayed under a uploaded video. It must be one line.'){|desc|
    if desc.lines.size <= 2
      puts "警告：説明文は1行あたり38文字以内が適切です".red if not desc.lines.all?{|line| line.chars.size < 39}
      case desc.lines.size
      when 2
        input[:description] = desc.chomp
      when 1
        input[:description] = desc.chomp + "\n"
      end
    else
      abort '説明文は2行以内です'
    end
  }
  opt.parse!(ARGV)
  input[:data_directory] = ARGV.first

  abort "処理済みの動画のディレクトリを指定してください" if input[:data_directory].nil?
  abort "指定したディレクトリは存在しません" if not Dir.exists? input[:data_directory]
end

# Authorization
client = Google::APIClient.new(:application_name => $0, :application_version => '1.0')
youtube = client.discovered_api('youtube', 'v3')
client.authorization = RenzaPublisher::OAuthHelper.new(RenzaPublisher::YOUTUBE_READ_WRITE_SCOPE).authorize()

files = Dir.entries(input[:data_directory]).select{|e|
  if e =~ /^vol(\d+)\./
    video_number = $1.to_i
    case input[:target]
    when Numeric
      input[:target] == video_number
    when Range
      input[:target].include? video_number
    when NilClass
      true
    end
  else
    false
  end
}

files.each do |file|
  begin
    video_number, video_extension = file[/^vol(\d+)\.(.+)/,1].to_i, file[/^vol(\d+)(\..+)/,2]
    path = RenzaPublisher::Path.new('/usr/tmp', input[:data_directory], video_extension, nil)
    metadata = JSON.parse(File.read path.metadata_file)
    location, time, win_or_lose = metadata['location'], Time.parse(metadata['time']), metadata['win_or_lose']

    # # upload video
    body = {
      snippet: {
        title: "【連ザ2】#{time.strftime("%Y年%m月%d日")} #{location} Vol.#{video_number}",
        tags: %w[連ザ 連ザ2 対戦動画 対戦会] << win_or_lose[video_number-1],
        categoryId: 20,
        description: if input[:description]
                       <<DESC
#{input[:description]}
対戦動画サイト：http://vs-seed.net
DESC
                     else
                       "対戦動画サイト：http://vs-seed.net"
                     end
      }}

    begin
      videos_insert_response = client.execute!(
        api_method: youtube.videos.insert,
        body_object: body,
        media: Google::APIClient::UploadIO.new(path.video_file(video_number), 'video/*'),
        parameters: {
          'uploadType' => 'multipart',
          :part => body.keys.join(',')
        })
    rescue Faraday::Error::TimeoutError => e
      puts "Faraday::Error::TimeoutError has ocuured.".red
      sleep 20; retry
    rescue Google::APIClient::ServerError => e
      puts "Google::APIClient::ServerError(#{e.message}) has occured."
      sleep 60; retry
    rescue Errno::EPIP => e
      puts "Errno::EPIP(#{e.message}) has occured."
      sleep 20; retry
    rescue => e
      binding.pry
      retry
    end
      
    video_id = JSON.parse(videos_insert_response.body)['id']
    metadata['video_ids'] ||= Array.new; metadata['video_ids'][video_number-1] = video_id
    File.write(path.metadata_file, metadata.to_json)
    
    # # set thumbnail
    begin
      thumbnail_set_response = client.execute!(
        api_method: youtube.thumbnails.set,
        parameters: {
          videoId: video_id,
          uploadType: 'resumable'
        })

      uri = URI.parse(thumbnail_set_response.headers['location'])

      https = Net::HTTP.new(uri.host, 443)
      https.use_ssl = true
      https.verify_mode = OpenSSL::SSL::VERIFY_NONE
      thumbnail_post_response = https.post(uri.path + '?' + uri.query, File.read(path.thumbnail_file(video_number)), {"Content-Type" => "images/jpeg"})
    rescue Net::ReadTimeout => e
      puts "Net::ReadTimeout has ocuured.".red
      sleep 5; retry
    rescue => e
      binding.pry
      retry
    end
    
    puts "Vol.#{video_number} was uploaded.".green
  rescue => e
    binding.pry
  end
end

puts "All videos was just uploaded.".green
