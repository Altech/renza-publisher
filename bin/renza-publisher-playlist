#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$:.unshift File.expand_path('../lib', __dir__)

require 'renza-publisher'
require 'renza-publisher/path'
require 'renza-publisher/oauth_helper'

require 'optparse'

require 'google/api_client'

require 'colorize'
require 'pry'

begin
  input = Hash.new

  opt = OptionParser.new("Usage: renza-publisher-playlist <data-directory>")
  input[:data_directory] = ARGV.first

  abort "対象となるデータの入ったディレクトリを指定してください" if input[:data_directory].nil?
  abort "指定したディレクトリは存在しません" if not Dir.exists? input[:data_directory]
end

# Authorization
client = Google::APIClient.new(:application_name => $0, :application_version => '1.0')
youtube = client.discovered_api('youtube', 'v3')
client.authorization = RenzaPublisher::OAuthHelper.new(RenzaPublisher::YOUTUBE_READ_WRITE_SCOPE).authorize()

begin
  path = RenzaPublisher::Path.new('/usr/tmp', input[:data_directory], nil, nil)
  metadata = JSON.parse(File.read path.metadata_file)
  location, time, video_ids = metadata['location'], Time.parse(metadata['time']), metadata['video_ids']

  # # create playlist
  body = {
    snippet: {
      title: "#{time.strftime("%Y年%m月%d日")} #{location}",
      description: time.strftime("%Y年%m月%d日")+"に"+location+"で行われた連ザ2の対戦",
      tags: %w[連ザ 連ザ2 対戦動画 対戦会]
    },
    status: {
      privacyStatus: "public"
    }}

  playlist_insert_response = client.execute!(
                                           api_method: youtube.playlists.insert,
                                           body_object: body,
                                           parameters: {
                                             :part => body.keys.join(',')
                                             })

  playlist_id = JSON.parse(playlist_insert_response.body)['id']
  
  # # insert playlist items
  video_ids.each_with_index do |video_id,i|
    body = {
      snippet: {
        playlistId: playlist_id,
        resourceId: {videoId: video_id, kind:'youtube#video'},
        position: i
      }}
    
    playlist_item_insert_response = client.execute!(
                                                    api_method: youtube.playlist_items.insert,
                                                    body_object: body,
                                                    parameters: {
                                                      :part => body.keys.join(',')
                                                    })
  end
  
  metadata['playlist_id'] = playlist_id
  File.write(path.metadata_file, metadata.to_json)
  
  puts "All videos are inserted to http://www.youtube.com/playlist?list=#{playlist_id}".green
rescue => e
  binding.pry
end
